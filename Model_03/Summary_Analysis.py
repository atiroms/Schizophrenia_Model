###############
# DESCRIPTION #
###############

# python code to analyze tensorflow summary files generated by meta-RL program


##############
# PARAMETERS #
##############

#data_path = '/home/atiroms/Documents/Dropbox/Schizophrenia_Model/saved_data/20180914_000352/summary'
#data_path = '/home/atiroms/Documents/Dropbox/Schizophrenia_Model/saved_data/20180918_211807/summary'
#data_path = '/home/atiroms/Documents/Dropbox/Schizophrenia_Model/saved_data/20180921_011111/summary'
#data_path = '/home/atiroms/Documents/Dropbox/Schizophrenia_Model/saved_data/20180923_114142/summary'
data_path = '/home/atiroms/Documents/Dropbox/Schizophrenia_Model/saved_data/20180924_175630/summary'


#############
# LIBRARIES #
#############

import numpy as np
import pandas as pd
import tensorflow as tf
#import matplotlib.pyplot as plt
import plotly as py
import cufflinks as cf
import glob
import os


###################
# DATA EXTRACTION #
###################

data_paths = glob.glob(os.path.join(data_path, "*", "event*"))

for p in data_paths:
    count=0
    for e in tf.train.summary_iterator(p):
        print("Extracting episode " + str(int(e.step)), end="\r")
        if count==1:
        #if count==0:
            colnames=['Simulation/Global Episode Count']+[v.tag for v in e.summary.value]
            df=pd.DataFrame(columns=colnames)
        
        if count>0:
        #if count>-1:
            data=[e.step]+[v.simple_value for v in e.summary.value]
            df.loc[count]=data
        count+=1


##############################
# DATA SAVING IN HDF5 FORMAT #
##############################

# '/' cannot be used as column names when stored in hdf5, so column names are stored separately
colnames=pd.Series(df.columns.values,index=('col'+str(i) for i in range(df.shape[1])))
df.columns=list('col'+str(i) for i in range(df.shape[1]))
hdf=pd.HDFStore(data_path+'/summary.h5')
hdf.put('summary',df,format='table',append=False,data_columns=True)
hdf.put('colnames',colnames)
hdf.close()


################
# DATA LOADING #
################

hdf = pd.HDFStore(data_path+'/summary.h5')
df = pd.DataFrame(hdf['summary'])
df.columns=hdf['colnames'].tolist()
hdf.close()


#################
# VISUALIZATION #
#################

#cf.set_config_file(offline=True, theme="white", offline_show_link=False)
#cf.go_offline()

#df.plot(x='Simulation/Global Episode Count', y='Performance/Reward')
#plt.show()

#df.iplot(kind="scatter", mode='markers', x='Simulation/Global Episode Count', y='Performance/Reward')


fig = df.iplot(kind="scatter",  asFigure=True,x='Simulation/Global Episode Count', y='Performance/Reward')
#fig = df.iplot(kind="scatter",  asFigure=True,x='Simulation/Global Episode Count', y='Perf/Reward')
py.offline.plot(fig, filename='example_scatter')
